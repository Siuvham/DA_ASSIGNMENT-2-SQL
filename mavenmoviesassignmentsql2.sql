use mavenmovies;

-- Question 1: Retrieve the total number of rentals made in the Sakila database. -- 
select count(*) as total_rentals
from rental;

-- Question 2: Find the average rental duration (in days) of movies rented from the Sakila database.
select avg(rental_duration) as avg_rental_duration
from film;

-- Question 3: Display the first name and last name of customers in uppercase. 
select upper(first_name) as first_name_upper,
upper(last_name) as last_name_upper
from customer;

-- Question 4: Extract the month from the rental date and display it alongside the rental ID. 
select rental_id, month(rental_date)
as rental_month
from rental;

-- Question 5: Retrieve the count of rentals for each customer (display customer ID and the count of rentals). 
select customer_id, count(*) as rental_count
from rental
group by customer_id;

-- Question 6: Find the total revenue generated by each store. 
select store.store_id, sum(p.amount) as total_revenue
from payment p
join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join store on i.store_id = store.store_id
group by store.store_id;

-- Question 7: Display the title of the movie, customer s first name, and last name who rented it. 
SELECT 
    film.title AS movie_title,
    customer.first_name AS customer_first_name,
    customer.last_name AS customer_last_name
FROM 
    rental
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    film ON inventory.film_id = film.film_id
JOIN 
    customer ON rental.customer_id = customer.customer_id;
    
-- Question 8: Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
SELECT 
    actor.first_name AS actor_first_name,
    actor.last_name AS actor_last_name
FROM 
    film
JOIN 
    film_actor ON film.film_id = film_actor.film_id
JOIN 
    actor ON film_actor.actor_id = actor.actor_id
WHERE 
    film.title = 'Gone with the Wild';
    
-- GROUP BY -- 

-- Question 1: Determine the total number of rentals for each category of movies. 
SELECT 
    category.name AS category_name,
    COUNT(rental.rental_id) AS total_rentals
FROM 
    rental
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    film ON inventory.film_id = film.film_id
JOIN 
    film_category ON film.film_id = film_category.film_id
JOIN 
    category ON film_category.category_id = category.category_id
GROUP BY 
    category.name
ORDER BY 
   COUNT(rental.rental_id)
   DESC;
   
-- Question 2:Find the average rental rate of movies in each language. 
SELECT 
    l.name AS language, 
    AVG(f.rental_rate) AS average_rental_rate
FROM 
    film AS f
JOIN 
    language AS l 
ON 
    f.language_id = l.language_id
GROUP BY 
    l.name
ORDER BY 
  avg(f.rental_rate)DESC;
  
-- JOINS --
-- Question 3: Retrieve the customer names along with the total amount they've spent on rentals. 
SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    SUM(p.amount) AS total_amount_spent
FROM 
    customer AS c
JOIN 
    rental AS r ON c.customer_id = r.customer_id
JOIN 
    payment AS p ON r.rental_id = p.rental_id
GROUP BY 
    c.customer_id
ORDER BY 
    SUM(p.amount)DESC;

-- Question 4: List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
SELECT 
    CONCAT(customer.first_name, ' ', customer.last_name) AS customer_name,
    film.title
FROM 
    customer
JOIN 
    address ON customer.address_id = address.address_id
JOIN 
    city ON address.city_id = city.city_id
JOIN 
    rental ON customer.customer_id = rental.customer_id
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    film ON inventory.film_id = film.film_id
WHERE 
    city.city = 'London'
GROUP BY 
    customer_name, film.title
ORDER BY 
    1,2; -- use the positional reference of columns in select -- 
    
-- ADVANCED JOINS AND GROUP BY -- 
-- Question 5: Display the top 5 rented movies along with the number of times they've been rented. 
SELECT 
    f.title AS movie_title,
    COUNT(r.rental_id) AS times_rented
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
GROUP BY 
    f.title
ORDER BY 
    COUNT(r.rental_id)DESC
    limit 5;
    
-- Question 6: Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 
SELECT customer.customer_id, customer.first_name, customer.last_name
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN customer ON rental.customer_id = customer.customer_id
WHERE inventory.store_id IN (1, 2)
GROUP BY customer.customer_id, customer.first_name, customer.last_name
HAVING COUNT(DISTINCT inventory.store_id) = 2;


